{ inputs, ... }:
{
  text.readme.parts.tmux =
    # markdown
    ''
      # Tmux 

      Tmux with configurations

    '';

  flake.modules.tmux.imports = [
    "plugins"
  ];

  flake.modules.tmux.plugins = [
    "better-mouse-mode"
    "yank"
    "sesh"
    "tmux-thumbs"
    "fzf-tmux-url"
    "tilish"
    "vim-tmux-navigator"
    "tmux-fzf"
    "catppuccin"
  ];

  perSystem =
    { pkgs, ... }:
    {
      packages.tmux =
        let
          tmuxConf = ''
            # This file is generated by https://github.com/dsnn/flakes/tmux

            #========================#
            #          BASE          #
            #========================#

            #========================#
            #         PLUGINS        #
            #========================#
          '';
          tmuxConfFile = pkgs.writeText "tmux.conf" tmuxConf;
        in
        pkgs.writeShellApplication {
          name = "tmux-wrapper";
          runtimeInputs = [ pkgs.tmux ];
          text = "tmux -f ${tmuxConfFile} \"$@\"";
        };
    };
}

# text.readme.tmux =
#   withSystem (builtins.head config.systems) (psArgs: psArgs.config.files.files)
#   |> map (file: "- `${file.path_}`")
#   |> lib.concat [
#     # markdown
#     ''
#       # Tmux
#
#       Standalone tmux with configurations, powered by [nixvim](https://github.com/nix-community/nixvim)
#
#       # Tmux plugins
#
#       | Name               | Description            |
#       | ------------------ | ---------------------- |
#       | better-mouse-mode  | <Reason for usage>     |
#     ''
#   ]
#   |> lib.concatLines
#   |> (s: s + "\n");

# let
#   is-package = pkgs.lib.types.package.check;
#   get-plugin-name = plugin: if is-package plugin then plugin.pname else plugin.plugin.pname;
#
#   plugin-config = pkgs.lib.concatMapStringsSep "\n\n" (plugin: ''
#     # ${get-plugin-name plugin}
#     # ${hr (get-plugin-name plugin)}
#     ${plugin.extraConfig or ""}
#     run-shell ${if is-package plugin then plugin.rtp else plugin.plugin.rtp}
#   '') [ ];
#
#   hr =
#     text:
#     let
#       parts = builtins.split "." text;
#     in
#     builtins.foldl' (text: part: if builtins.isList part then "${text}-" else text) "" (
#       builtins.tail parts
#     );
#
#   tmuxConf = builtins.concatStringsSep "\n" [
#     "# Main config"
#
#     (builtins.readFile ./tmux.conf)
#   ];
# in
